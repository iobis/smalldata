openapi: 3.0.0
info:
  version: 1.0.0
  title: Small Data Swagger
  license:
    name: MIT
servers:
  - url: http://localhost:8008/
  - url: http://localhost:8080/
paths:
  /api/status:
    get:
      summary: get status of the server
      operationId: getStatus
      tags:
        - info
      responses:
        200:
          description: application running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/rss/{periodicity}:
    get:
      summary: rss feed
      operationId: getRss
      parameters:
        - name: periodicity
          in: path
          description: periodicity of the rss feed
          required: false
          schema:
            type: string
      tags:
        - rss
      responses:
        200:
          description: received rss
          content:
            application/xml+rss: {}
  /api/occurence:
    post:
      summary: post new data to small data occurences
      operationId: postOccurence
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Occurence"
      tags:
        - occurences
      responses:
        200:
          description: new occurences data created and stored
          content:
            application/json: {}
        405:
          description: invalid input

components:
  schemas:
    Status:
      type: object
      properties:
        title:
          type: String
          example: 'swaggered application'
        status:
          type: String
          enum: ['OK', 'error']
          example: 'OK'
    DWC.Event:
      type: object
      required:
        - eventDate
      properties:
        eventDate:
          type: string
          format: date-time
    DWC.Location:
      type: object
      required:
        - decimalLongitude
        - decimalLatitude
      properties:
        decimalLongitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        decimalLatitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
    DWC.Occurence:
      type: object
      required:
        - occurenceID
      properties:
        occurenceID:
          type: string
        occurenceStatus:
          type: string
          enum: ['absent', 'present']
    DWC.Record:
      type: object
      required:
        - basisOfRecord
      properties:
        basisOfRecord:
          type: string
          enum: ['PreservedSpecimen', 'FossilSpecimen', 'LivingSpecimen', 'HumanObservation', 'MachineObservation']
        references:
          type: array
          items:
            type: string
            format: uri
    DWC.Taxon:
      type: object
      required:
        - scientificNameID
      properties:
        scientificNameID:
          type: string
        scientificName:
          type: string
    Occurence:
      type: object
      required:
        - location
        - taxon
        - occurence
        - event
        - record
      properties:
        location:
          $ref: "#/components/schemas/DWC.Location"
        taxon:
          $ref: "#/components/schemas/DWC.Taxon"
        occurence:
          $ref: "#/components/schemas/DWC.Occurence"
        event:
          $ref: "#/components/schemas/DWC.Event"
        record:
          $ref: "#/components/schemas/DWC.Record"
      additionalProperties: false
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
